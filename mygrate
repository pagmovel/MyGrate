#!/usr/bin/env php
<?php
//date_default_timezone_set('America/Recife');
/*************************************************************
* Este modulo criar migrates para o yiic migrate 
* Além do comando CREATE, ele adiciona comandos:
* add (adicionar colunas), 
* alter (alterar colunas),
* del (deletar colunas)
* No final ele acrescenta regras rollback para o migrate history 
**************************************************************/
/*
Tipos de campos permitidos:
pk	 : an auto­incremental primary key type, will be converted into “int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY”
string	 : string type, will be converted into “varchar(255)”
text	 : a long string type, will be converted into “text”
integer	 : integer type, will be converted into “int(11)”
boolean	 : boolean type, will be converted into “tinyint(1)”
float	 : float number type, will be converted into “float”
decimal	 : decimal number type, will be converted into “decimal”
datetime : datetime type, will be converted into “datetime”
timestamp: timestamp type, will be converted into “timestamp”
time	 : time type, will be converted into “time”
date	 : date type, will be converted into “date”
binary	 : binary data type, will be converted into “blob”
fk	 : chave extrangeira (ainda não implantada)
*/

// Define type allowed
$allowed = array("pk","string","text","integer","boolean","float","decimal","datetime","time","date","binary");

// Define name file's
$name_file = "m".date('ymd')."_".date('hmi')."_".$argv[2];

//convert all to lower
$argv =  unserialize(strtolower(serialize($argv))); 

$margin = '		';


/*****************************************************************
Using method add columns
******************************************************************/
if ($argv[1]=='create') { 
	$up = "	    \$this->createTable('".$argv[2]."', array(
		'id' => 'pk',\n";
	 for ($i=3; $i < $argc; $i++)
	 {
		$campo = _explode($argv[$i]);
		$up.=$margin;
		// verifica se passou campo SEM tipo definido
		if(!isset( $campo[1] )){
			$up.= "'".$campo[0]."' = 'string',\n";
		} else {
			//  verifica se passou campo COM tipo definido
			if(in_array($campo[1], $allowed)){
				$up.= "'".$campo[0]."' = '".$campo[1]."',\n";
			} else {
				_erro($campo);
			}
		}
	 }
	$up.="$margin'date_created' = 'timestamp',\n";
	$up.="$margin'date_altered' = 'timestamp',\n";
	$up.='	    ));';

	$down = "$margin \$this->dropTable('".$argv[2]."');\n";
	$down.= "$margin echo \"$name_file does not support migration down.\";\n";
        $down.= "$margin return false;\n";
}
 


/*****************************************************************
Using method add columns
******************************************************************/

if ($argv[1]=='add') { 
	for ($i=3; $i < $argc; $i++)
	{
		$campo = _explode($argv[$i]);
		// verifica se passou campo SEM tipo definido
		if($campo[1]== null){		
			$up.= "$margin\$this->addColumn('".$argv[2]."','".$campo[0]."', 'string');\n";
		} else {
			//  verifica se passou campo COM tipo definido
			if(in_array($campo[1], $allowed)){
				$up.= "$margin\$this->addColumn('".$argv[2]."','".$campo[0]."', '".$campo[1]."');\n";
			} else { 
				_erro($campo);
			}
		}
	}


	for ($i=3; $i < $argc; $i++)
	{
		$campo=explode("=",$argv[$i]);
		$down.= "$margin\$this->dropColumn('".$argv[2]."','".$campo[0]."');\n";
	}
}
 




echo "<?php

class $name_file extends CDbMigration
{
        public function up()
        {
$up
        }

        public function down()
        {
$down
        }

        /*
        // Use safeUp/safeDown to do migration with transaction
        public function safeUp()
        {
        }

        public function safeDown()
        {
        }
        */
}
";



function _explode($arg){
	if(strpos($arg, '=' ) !== false){
		$campo=explode("=",$arg);
	} elseif(strpos($arg, ':' ) !== false){
		$campo=explode(":",$arg);
	} else{
		$campo[0]= trim($arg);
		$campo[1]= null;
	}
	return $campo;
}

function _erro($arg){
	echo "\n\nERROR: Type '".$arg[1]."' in '".$arg[0]."' not allowed\n";
	echo "Type's allowed: \n";
	echo "pk, string, text, integer, boolean, float, decimal, datetime, time, date, binary\n";
	die();
}
?>
